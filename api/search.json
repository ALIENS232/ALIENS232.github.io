[{"id":"ad07a23e70b0e9f11bd9b11c976479b5","title":"TEST","content":"设计模式设计模式简介可复用\n深入理解面向对象：\n​\t封装：隐藏内部实现\n​\t继承：复用现有代码\n​\t多态：改写对象行为\n面对变化：\n​\t分解：分治\n​\t抽象：处理泛化和理想化的模型\n面向对象设计原则隔离变化：\n​\t面向对象能够将变化带来的影响减为最小\n各司其职：\n​\t新增变化导致的新类型不影响原来类型\n对象：\n​\t语言实现上封装了代码和数据\n​\t规格上是可以被使用的公共接口\n​\t概念上是拥有责任的抽象\n设计原则依赖倒置原则​\t高层（稳定）与低层（变化）模块互不依赖，二者都依赖于抽象（稳定）\n​\t实现细节（变化）依赖于抽象（稳定）\n开放封闭原则​\t对扩展开放，对修改封闭\n​\t类模块可以扩展，不能修改\n单一职责原则​\t一个类仅有一个引起他变化的原因\n​\t变化的方向隐含类的责任\n替换原则​\t子类能够替换成它们的基类（is a）\n​\t继承表达类型抽象\n接口隔离原则​\t接口小而完备\n​\t客户程序不使用它们不需要的接口\n优先使用对象组合，而不是类继承​\t黑箱，白箱\n​\t继承某种程度是破坏了封装性，父类对子类透明\n​\t对象组合要求对象有良好定义的接口\n针对接口编程，而不是针对实现编程​\t不将变量类型声明为某个特定的具体类，而是声明为某个接口\n​\t客户无需知道对象的具体类型，而要知道对象的所有接口\n","slug":"TEST","date":"2022-12-27T09:02:26.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-12-27T03:45:53.202Z","categories_index":"","tags_index":"","author_index":"Aurora"}]